#include "trace.h"

#include <cassert>
#include <cstdint>
#include <cstdlib>

#include <sys/mman.h>
#if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
#define MAP_ANONYMOUS MAP_ANON
#endif

#include "dynasm/dasm_proto.h"
#include "dynasm/dasm_arm.h"

#include "ir.h"

|.arch arm

void Trace::compile(const std::vector<Trace>& traces) {
  // Compilation using DynASM is very much inspired by the follow tutorial:
  // https://corsix.github.io/dynasm-doc/tutorial.html
  // Many thanks to Peter Cawley for documentation and to Mike Pall for DynASM.
  // Please refer to LICENSE for details.
  dasm_State *d;

  |.section code
  dasm_init(&d, DASM_MAXSECTION);
  |

  |.globals lbl_
  void* labels[lbl__MAX];
  dasm_setupglobal(&d, labels, lbl__MAX);

  |.actionlist bf_actions
  dasm_setup(&d, bf_actions);

  dasm_State** Dst = &d;
  |->bf_trace:

  |.define PTR, r4
  |.define SCRATCH1, r5
  |.define SCRATCH2, r6
  |.define SCRATCH3, r7

  | push {PTR, SCRATCH1, SCRATCH2, SCRATCH3, lr}

  | mov PTR, r0

  |->loop:
  for (const auto *ir : instrs) {
    switch (ir->getOp()) {
    case IncPtr:
      | add PTR, PTR, #ir->getA()
      break;
    case DecPtr:
      | sub PTR, PTR, #ir->getA()
      break;
    case IncByte:
      | ldrb SCRATCH1, [PTR, #ir->getB()]
      | add SCRATCH1, SCRATCH1, #ir->getA()
      | strb SCRATCH1, [PTR, #ir->getB()]
      break;
    case DecByte:
      | ldrb SCRATCH1, [PTR, #ir->getB()]
      | sub SCRATCH1, SCRATCH1, #ir->getA()
      | strb SCRATCH1, [PTR, #ir->getB()]
      break;
    case PutChar:
      | mov r0, PTR
      | bl ->putchar
      break;
    case GetChar:
      assert(false);
      break;
    case Label:
      | ldrb SCRATCH1, [PTR]
      | cmp SCRATCH1, #0
      | beq ->cleanup
      break;
    case Jmp:
      | b ->loop
      break;
    case Assign:
      | mov SCRATCH1, #ir->getA()
      | strb SCRATCH1, [PTR]
      break;
    case MulAdd:
      | ldrb SCRATCH1, [PTR]
      | ldrb SCRATCH2, [PTR, #ir->getB()]

      | mov SCRATCH3, #ir->getA()
      | mul SCRATCH1, SCRATCH1, SCRATCH3

      | add SCRATCH1, SCRATCH2, SCRATCH1

      | strb SCRATCH1, [PTR, #ir->getB()]
      break;
    case MulSub:
      | ldrb SCRATCH1, [PTR]
      | ldrb SCRATCH2, [PTR, #ir->getB()]

      | mov SCRATCH3, #ir->getA()
      | mul SCRATCH1, SCRATCH1, SCRATCH3

      | sub SCRATCH1, SCRATCH2, SCRATCH1

      | strb SCRATCH1, [PTR, #ir->getB()]
      break;
    case Jit: {
      | movw SCRATCH1, #(uint32_t)(intptr_t)traces.at(ir->getB()).getMcode()
      | movt SCRATCH1, #(uint32_t)(intptr_t)traces.at(ir->getB()).getMcode() >> 16
      | mov r0, PTR
      | blx SCRATCH1
      | mov PTR, r0
      }
      break;
    case Hlt:
      assert(false);
      break;
    }
  }

  |->cleanup:

  | mov r0, PTR
  | pop {PTR, SCRATCH1, SCRATCH2, SCRATCH3, pc}

  dasm_link(&d, &mcodeSz);

  mcode = mmap(0, mcodeSz, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
  dasm_encode(&d, mcode);
  mprotect(mcode, mcodeSz, PROT_READ | PROT_EXEC);

  dasm_free(&d);

  // free IR to save memory
  std::vector<const IR *>().swap(instrs);
}
